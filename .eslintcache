[{"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\index.js":"1","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\reportWebVitals.js":"2","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\App.js":"3","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\index.js":"4","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\publicUtils.js":"5","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useExpanded.js":"6","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useFilters.js":"7","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useGroupBy.js":"8","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useSortBy.js":"9","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useGlobalFilter.js":"10","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\hooks\\useTable.js":"11","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\_UNSTABLE_usePivotColumns.js":"12","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\usePagination.js":"13","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useRowSelect.js":"14","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useColumnOrder.js":"15","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useBlockLayout.js":"16","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useResizeColumns.js":"17","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useRowState.js":"18","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useAbsoluteLayout.js":"19","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useFlexLayout.js":"20","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useGridLayout.js":"21","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\hooks\\useColumnVisibility.js":"22","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\utils.js":"23","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\filterTypes.js":"24","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\aggregations.js":"25","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\makeDefaultPluginHooks.js":"26","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\sortTypes.js":"27","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\makeData.js":"28","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\index.js":"29","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\useCreation\\index.js":"30","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\useUpdate\\index.js":"31","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\useUpdateEffect\\index.js":"32","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\useCreationAsyc\\index.js":"33","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\usePersistFn\\index.js":"34","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\RTable\\index.js":"35","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\Toolbar\\index.js":"36","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Grouping.js":"37","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\FilterTypeCom\\index.js":"38","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\RTable\\util.js":"39","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Filtering.js":"40","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\IndeterminationCheckbox\\index.js":"41","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\TablePagination\\index.js":"42","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Basic.js":"43","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Footers.js":"44","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Sorting.js":"45","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Pagination.js":"46","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\RowSelection.js":"47","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Expanding.js":"48","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\LazySubComponent.js":"49","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\EditableData.js":"50","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\ColumnHiding.js":"51","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\VirtualizedRows.js":"52","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\DataDriven.js":"53","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\TableFooter\\index.js":"54","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\RTable\\customHook.js":"55","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\TableBody\\index.js":"56","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\FullWidthColumnResizing.js":"57"},{"size":2273,"mtime":1612602988609,"results":"58","hashOfConfig":"59"},{"size":362,"mtime":1606891595962,"results":"60","hashOfConfig":"59"},{"size":8045,"mtime":1612163655031,"results":"61","hashOfConfig":"59"},{"size":1058,"mtime":1611561447686,"results":"62","hashOfConfig":"59"},{"size":6598,"mtime":1612233802212,"results":"63","hashOfConfig":"59"},{"size":5249,"mtime":1611564345383,"results":"64","hashOfConfig":"59"},{"size":7759,"mtime":1611561447691,"results":"65","hashOfConfig":"59"},{"size":11682,"mtime":1611561447692,"results":"66","hashOfConfig":"59"},{"size":10445,"mtime":1611907609999,"results":"67","hashOfConfig":"59"},{"size":4599,"mtime":1611561447692,"results":"68","hashOfConfig":"59"},{"size":16658,"mtime":1611561447686,"results":"69","hashOfConfig":"59"},{"size":7673,"mtime":1611561447687,"results":"70","hashOfConfig":"59"},{"size":4336,"mtime":1611561447692,"results":"71","hashOfConfig":"59"},{"size":10459,"mtime":1612597913858,"results":"72","hashOfConfig":"59"},{"size":2194,"mtime":1611561447691,"results":"73","hashOfConfig":"59"},{"size":1042,"mtime":1611817418810,"results":"74","hashOfConfig":"59"},{"size":7053,"mtime":1611561447693,"results":"75","hashOfConfig":"59"},{"size":3992,"mtime":1611561447693,"results":"76","hashOfConfig":"59"},{"size":1191,"mtime":1611561447690,"results":"77","hashOfConfig":"59"},{"size":1661,"mtime":1611561447691,"results":"78","hashOfConfig":"59"},{"size":2071,"mtime":1611561447692,"results":"79","hashOfConfig":"59"},{"size":5462,"mtime":1611735387126,"results":"80","hashOfConfig":"59"},{"size":8414,"mtime":1611561447694,"results":"81","hashOfConfig":"59"},{"size":3374,"mtime":1611561447684,"results":"82","hashOfConfig":"59"},{"size":1505,"mtime":1611561447684,"results":"83","hashOfConfig":"59"},{"size":1924,"mtime":1611561447686,"results":"84","hashOfConfig":"59"},{"size":2106,"mtime":1611561447694,"results":"85","hashOfConfig":"59"},{"size":933,"mtime":1612506371658,"results":"86","hashOfConfig":"59"},{"size":333,"mtime":1607677474297,"results":"87","hashOfConfig":"59"},{"size":4492,"mtime":1607677284682,"results":"88","hashOfConfig":"59"},{"size":318,"mtime":1595386360923,"results":"89","hashOfConfig":"59"},{"size":1328,"mtime":1592209490226,"results":"90","hashOfConfig":"59"},{"size":1401,"mtime":1596703736436,"results":"91","hashOfConfig":"59"},{"size":2079,"mtime":1592209490207,"results":"92","hashOfConfig":"59"},{"size":20635,"mtime":1612603153401,"results":"93","hashOfConfig":"59"},{"size":1123,"mtime":1612322454992,"results":"94","hashOfConfig":"59"},{"size":3029,"mtime":1612602000507,"results":"95","hashOfConfig":"59"},{"size":6356,"mtime":1612600929528,"results":"96","hashOfConfig":"59"},{"size":1086,"mtime":1612346394993,"results":"97","hashOfConfig":"59"},{"size":3731,"mtime":1612601953868,"results":"98","hashOfConfig":"59"},{"size":448,"mtime":1612253713689,"results":"99","hashOfConfig":"59"},{"size":4091,"mtime":1612324499261,"results":"100","hashOfConfig":"59"},{"size":1773,"mtime":1612601955097,"results":"101","hashOfConfig":"59"},{"size":2529,"mtime":1612601970547,"results":"102","hashOfConfig":"59"},{"size":1623,"mtime":1612602106378,"results":"103","hashOfConfig":"59"},{"size":2280,"mtime":1612602062040,"results":"104","hashOfConfig":"59"},{"size":2727,"mtime":1612602085106,"results":"105","hashOfConfig":"59"},{"size":1660,"mtime":1612601905723,"results":"106","hashOfConfig":"59"},{"size":4254,"mtime":1612602039094,"results":"107","hashOfConfig":"59"},{"size":3689,"mtime":1612601955097,"results":"108","hashOfConfig":"59"},{"size":1664,"mtime":1612601686200,"results":"109","hashOfConfig":"59"},{"size":1843,"mtime":1612602498735,"results":"110","hashOfConfig":"59"},{"size":4075,"mtime":1612601833455,"results":"111","hashOfConfig":"59"},{"size":615,"mtime":1612423333784,"results":"112","hashOfConfig":"59"},{"size":435,"mtime":1612584225879,"results":"113","hashOfConfig":"59"},{"size":2189,"mtime":1612600572391,"results":"114","hashOfConfig":"59"},{"size":2061,"mtime":1612602862400,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"n2dpyb",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"118"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"118"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"118"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"118"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"118"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"118"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"118"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"118"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"118"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"118"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"118"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"118"},"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\index.js",[],["245","246"],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\reportWebVitals.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\App.js",["247","248","249"],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\publicUtils.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useExpanded.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useFilters.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useGroupBy.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useSortBy.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useGlobalFilter.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\hooks\\useTable.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\_UNSTABLE_usePivotColumns.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\usePagination.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useRowSelect.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useColumnOrder.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useBlockLayout.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useResizeColumns.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useRowState.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useAbsoluteLayout.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useFlexLayout.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\plugin-hooks\\useGridLayout.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\hooks\\useColumnVisibility.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\utils.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\filterTypes.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\aggregations.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\makeDefaultPluginHooks.js",[],["250","251"],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\react-table\\sortTypes.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\makeData.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\useCreation\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\useUpdate\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\useUpdateEffect\\index.js",["252","253"],"import { useEffect, useRef } from 'react';\r\nconst useUpdateEffect = (effect, deps) => {\r\n  const isMounted = useRef(false);\r\n  useEffect(() => {\r\n    if (!isMounted.current) {\r\n      isMounted.current = true;\r\n    } else {\r\n      return effect();\r\n    }\r\n  }, deps);\r\n};\r\nexport default useUpdateEffect;\r\n/*\r\n一个只在依赖更新时执行的 useEffect hook。\r\n使用上与 useEffect 完全相同，只是它忽略了首次渲染，且只在依赖项更新时运行。\r\nimport { Button } from 'antd';\r\nimport React, { useLayoutEffect, useState } from 'react';\r\nimport { useUpdateEffect } from 'hooks';\r\n\r\nexport default () => {\r\n  const [count, setCount] = useState(0);\r\n  const [effectCount, setEffectCount] = useState(0);\r\n  const [updateEffectCount, setUpdateEffectCount] = useState(0);\r\n\r\n  useLayoutEffect(() => {\r\n    setEffectCount(c => c + 1);\r\n  }, [count]);\r\n\r\n  useUpdateEffect(() => {\r\n    setUpdateEffectCount(c => c + 1);\r\n    return () => {\r\n      // do something\r\n    };\r\n  }, [count]); // you can include deps array if necessary\r\n\r\n  return (\r\n    <div>\r\n      <p>effectCount: {effectCount}</p>\r\n      <p>updateEffectCount: {updateEffectCount}</p>\r\n      <p>\r\n        <Button type=\"primary\" onClick={() => setCount(c => c + 1)}>\r\n          reRender\r\n        </Button>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n*/\r\n","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\useCreationAsyc\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\hooks\\usePersistFn\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\RTable\\index.js",["254","255"],"import React, { useEffect, } from 'react'\r\nimport { useTable, useSortBy, usePagination, useRowSelect, useExpanded, useGroupBy, useColumnOrder, useResizeColumns, useFlexLayout, useFilters, useGlobalFilter } from '../../react-table'\r\nimport { Icon, Table, Dimmer, Loader, } from 'semantic-ui-react'\r\nimport { useCreation, usePersistFn } from '../../hooks'\r\n\r\n\r\nimport TablePagination from '../TablePagination'\r\nimport IndeterminateCheckbox from '../IndeterminationCheckbox'\r\nimport Toolbar from '../Toolbar'\r\nimport TableFooter from '../TableFooter'\r\nimport TableBodyRender from '../TableBody'\r\nimport { GlobalFilter, DefaultColumnFilter } from '../FilterTypeCom'\r\n\r\nimport { useControlledState } from './customHook'\r\n\r\n\r\nimport { FixedSizeList } from 'react-window'\r\n\r\nimport { fuzzyTextFilterFn } from './util'\r\n\r\n\r\nimport \"./styles.css\"\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\n// Create a default prop getter\r\nconst defaultPropGetter = () => ({})\r\n\r\nfunction RTable({\r\n  columns,\r\n  data,\r\n  showFooter, //是否显示页脚\r\n  customFooter, //自定义页脚组件\r\n  sortable,//排序\r\n  paginationConfig,//分页\r\n  rowSelection, //行选择\r\n  isExpanded, //子节点是否展开\r\n  selectable, //行是否可点击\r\n  renderRowSubComponent,//渲染行子组件\r\n  updateData, //可编辑表格 更新数据\r\n  defaultColumn, //列属性\r\n  canResize,//调整列宽 \r\n  loading, //loading 加载中\r\n  groupBy,  //是否分组\r\n  filter, //表头过滤\r\n  filterGlobal, //全局过滤\r\n  columsCanHidden,//列隐藏控制\r\n  getHeaderProps = defaultPropGetter, \r\n  getColumnProps = defaultPropGetter,\r\n  getRowProps = defaultPropGetter,\r\n  getCellProps = defaultPropGetter,\r\n  virtualizedRows,//虚拟列\r\n  ...otherProps  //可传入其他semantic的属性\r\n}) {\r\n\r\n  //初始值 为useTable提供默认值\r\n  const [compApi] = useCreation(() => {\r\n    // 默认\r\n    let initValue = {\r\n      columns,\r\n      data,\r\n      defaultColumn: defaultColumn || {},\r\n      // updateData isn't part of the API, but\r\n      // anything we put into these options will\r\n      // automatically be available on the instance.\r\n      // That way we can call this function from our\r\n      // cell renderer!\r\n      updateData,  //可编辑表格时 自定义更新数据函数\r\n\r\n    }\r\n\r\n    //初始state\r\n    let initState = () => {\r\n      let state = {}\r\n      //分页配置\r\n      if (paginationConfig) {\r\n        state = {\r\n          ...state,\r\n          pageSize: paginationConfig?.pageSize || 10,\r\n          pageIndex: (paginationConfig?.pageIndex) - 1 || 1,\r\n        }\r\n      }\r\n      // 行选中\r\n      if (rowSelection) {\r\n        state = {\r\n          ...state,\r\n          selectedRowIds: rowSelection?.selectedRowIds || {}\r\n        }\r\n      }\r\n      //初始分组\r\n      if (groupBy && groupBy.length) {\r\n        state = {\r\n          ...state,\r\n          groupBy\r\n        }\r\n      }\r\n      return state\r\n    }\r\n\r\n    initValue = {\r\n      ...initValue,\r\n      initialState: initState()\r\n    }\r\n\r\n    //过滤类型\r\n    if (filter) {\r\n      initValue = {\r\n        ...initValue,\r\n        // 过滤\r\n        filterTypes: {\r\n          // Add a new fuzzyTextFilterFn filter type.\r\n          fuzzyText: fuzzyTextFilterFn,\r\n          // Or, override the default text filter to use\r\n          // \"startWith\"\r\n          text: (rows, id, filterValue) => {\r\n            return rows.filter(row => {\r\n              const rowValue = row.values[id]\r\n              return rowValue !== undefined\r\n                ? String(rowValue)\r\n                  .toLowerCase()\r\n                  .startsWith(String(filterValue).toLowerCase())\r\n                : true\r\n            })\r\n          },\r\n        },\r\n        // 默认列\r\n        defaultColumn: {\r\n          ...initValue.defaultColumn,\r\n          //过滤默认使用组件\r\n          Filter: DefaultColumnFilter\r\n        },\r\n      }\r\n    }\r\n\r\n    return initValue\r\n  }, [defaultColumn, paginationConfig, rowSelection, groupBy, filter])\r\n\r\n\r\n  //hook\r\n  //调整列宽插件 \r\n  const [ResizePlugin] = useCreation(() => {\r\n    return {\r\n      // 可调节列宽 / 虚拟行  采用flex布局\r\n      useFlexLayout: ((canResize || virtualizedRows) && useFlexLayout) || '',\r\n    }\r\n  }, [canResize, virtualizedRows])\r\n\r\n\r\n\r\n  //核心\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    //基本\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    //页脚\r\n    footerGroups,\r\n\r\n    //=====分页===\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    //初始状态\r\n    state,\r\n    //=====分页===\r\n\r\n    //显示的最大列数\r\n    visibleColumns,\r\n\r\n    //行勾选\r\n    selectedFlatRows,  //被选中的行数据\r\n    selectedRows,//ztt add 被选中的行数据\r\n    isAllRowsSelected,  //判断当前所有数据是否被全选\r\n    isAllPageRowsSelected, //判断当前页是否被全选\r\n    getToggleAllRowsSelectedProps, //获取所有行全选的属性值\r\n\r\n    //所有cloumns\r\n    allColumns,\r\n    setHiddenColumns,  //设置隐藏的列\r\n\r\n    //过滤\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter\r\n    \r\n  } = useTable(\r\n\r\n    // ======默认配置\r\n    compApi,\r\n    //=========插件配置\r\n\r\n    //过滤\r\n    useFilters, // useFilters!\r\n    useGlobalFilter, // useGlobalFilter!\r\n\r\n    useResizeColumns,  //调整列宽\r\n    useColumnOrder,//列调换位置\r\n    useGroupBy,//分组\r\n    useSortBy,  //排序\r\n    useExpanded, //行展开\r\n    usePagination, //分页\r\n    useRowSelect,//行勾选\r\n    ResizePlugin.useFlexLayout,  //flex布局插件\r\n    hooks => {\r\n      //增加展开箭头 适用多级数据\r\n      if (isExpanded) {\r\n        hooks.useControlledState.push(useControlledState)\r\n        hooks.visibleColumns.push((columns, { instance }) => {\r\n          //如果没有分组 直接返回值\r\n          if (groupBy && !instance.state.groupBy.length) {\r\n            return columns\r\n          }\r\n          return [\r\n            {\r\n              // 设置展开列\r\n              // Build our expander column\r\n              id: 'expander', // Make sure it has an ID\r\n              Header: ({ allColumns, state: { groupBy }, getToggleAllRowsExpandedProps, isAllRowsExpanded }) => {\r\n                const RenderExpand = () => {  //控制头部整列展开状态\r\n                  return (\r\n                    <span {...getToggleAllRowsExpandedProps()}>\r\n                      {isAllRowsExpanded ? <Icon name=\"angle down\" /> : <Icon name=\"angle right\" />}\r\n                    </span>\r\n                  )\r\n                }\r\n                if (groupBy) {  //分组\r\n                  return groupBy.map(columnId => {\r\n                    const column = allColumns.find(d => d.id === columnId)\r\n                    return (\r\n                      <span {...column.getHeaderProps(tableProps.headerProps)} key={column.id}>\r\n                        <RenderExpand />\r\n                        {column.canGroupBy ? (\r\n                          // If the column can be grouped, let's add a toggle\r\n                          <span {...column.getGroupByToggleProps()}>\r\n                            {column.isGrouped ? <Icon name=\"circle\" /> : <Icon name=\"circle outline\" />}\r\n                          </span>\r\n                        ) : null}\r\n                        {column.render('Header')}{' '}\r\n                      </span>\r\n                    )\r\n                  })\r\n                } else {\r\n                  return <RenderExpand />\r\n                }\r\n              }\r\n              ,\r\n              Cell: ({ row }) => {\r\n                // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n                // to build the toggle for expanding a row\r\n                if (row.canExpand) {\r\n\r\n                  const groupedCell = row.allCells.find(d => d.isGrouped)\r\n                  return (\r\n                    <span\r\n                      {...row.getToggleRowExpandedProps({\r\n                        style: {\r\n                          // We can even use the row.depth property\r\n                          // and paddingLeft to indicate the depth\r\n                          // of the row\r\n                          paddingLeft: `${row.depth * 2}rem`,\r\n                        },\r\n                      })}\r\n                    >\r\n                      {row.isExpanded ? <Icon name=\"angle down\" /> : <Icon name=\"angle right\" />}\r\n                      {(groupBy && groupBy.length) ?\r\n                        <>\r\n                          {groupedCell.render('Cell')}\r\n                          {' '}\r\n                          {/* 统计数字 */}\r\n                          ({row.subRows.length})\r\n                        </> : null}\r\n                    </span>\r\n                  )\r\n                }\r\n                return null\r\n\r\n              },\r\n              // We can override the cell renderer with a SubCell to be used with an expanded row\r\n              SubCell: () => null // No expander on an expanded row\r\n            },\r\n            ...columns,\r\n          ]\r\n        })\r\n      }\r\n\r\n      //增加行选择列\r\n      if (rowSelection) {\r\n        hooks.visibleColumns.push(columns => [\r\n          // Let's make a column for selection\r\n          {\r\n            id: 'selection',\r\n            // The header can use the table's getToggleAllRowsSelectedProps method\r\n            // to render a checkbox\r\n            //NOTE: 下面根据传入的值不同 全选按钮分为两类  =》\"getToggleAllPageRowsSelectedProps\"当前页全选  \"getToggleAllRowsSelectedProps\"所有数据全选\r\n            Header: ({ getToggleAllPageRowsSelectedProps }) => (\r\n              <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()}/>\r\n            ),\r\n            // The cell can use the individual row's getToggleRowSelectedProps method\r\n            // to the render a checkbox\r\n            Cell: ({ row }) => (\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()}  />\r\n            ),\r\n          },\r\n          ...columns,\r\n        ])\r\n      }\r\n\r\n    },\r\n\r\n  )\r\n\r\n  // We don't want to render all of the rows for this example, so cap\r\n  // it for this use case\r\n  useEffect(() => {\r\n    rowSelection?.onChange?.(state.selectedRowIds, selectedRows)\r\n  }, [rowSelection,state.selectedRowIds,selectedRows])\r\n\r\n  //点击全选当前页所有行回调\r\n  useEffect(() => {\r\n    rowSelection?.onAllPageRowsSelected?.(isAllPageRowsSelected)\r\n  }, [rowSelection,isAllPageRowsSelected])\r\n\r\n\r\n  //点击全选所有行回调\r\n  useEffect(() => {\r\n    rowSelection?.onAllRowsSelected?.(isAllRowsSelected)\r\n  }, [rowSelection,isAllRowsSelected])\r\n\r\n\r\n  //表格渲染提供Props\r\n  const [tableProps] = useCreation(() => {\r\n    //Table Header 属性\r\n    const headerRoot = () => {\r\n      let bgColor = \"#f9fafb\"\r\n\r\n      //根据主题变换表头背景颜色\r\n      if (otherProps?.basic) {\r\n        bgColor = 0\r\n      } else if (otherProps?.inverted) {\r\n        bgColor = 'rgba(0,0,0,.15)'\r\n      }\r\n\r\n      return {\r\n        style: {\r\n          background: bgColor\r\n        }\r\n      }\r\n    }\r\n    //Table Header Row 属性\r\n    const headerGroupProps = (props, { index }) => {\r\n\r\n      if (virtualizedRows) {\r\n        return [\r\n          props,\r\n          {\r\n            style: {\r\n              maxWidth: 'calc(100% - 10px)',\r\n              borderRight: '1px solid rgba(34,36,38,.1)'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      return [props]\r\n    }\r\n    //Table Header cell属性\r\n    const headerProps = (props, { column }) => {\r\n      const align = column.align || 'left'\r\n      let newProps = [\r\n        props,\r\n        {\r\n          className: column.className,\r\n          style: {\r\n            ...column.style,\r\n            textAlign: align  //设置表头值的位置\r\n          },\r\n        }\r\n      ]\r\n\r\n      //外部传入自定义属性\r\n      let otherProps = [\r\n        getColumnProps(column),\r\n        getHeaderProps(column),\r\n      ]\r\n      //增加排序点击事件\r\n      if (sortable) {\r\n        newProps.push(column.getSortByToggleProps())\r\n      }\r\n\r\n      return [...newProps, ...otherProps]\r\n    }\r\n    //Table Body Cell 属性\r\n    const cellProps = (props, { cell }) => {\r\n      const align = cell.column.align || 'left'\r\n      return [\r\n        props,\r\n        {\r\n          className: cell.column.className,\r\n          style: {\r\n            ...cell.column.style,\r\n            textAlign: align,//设置单元格值的位置\r\n\r\n          },\r\n        },\r\n        getColumnProps(cell.column),\r\n        getCellProps(cell),\r\n      ]\r\n\r\n    }\r\n\r\n    return {\r\n      headerRoot,\r\n      headerGroupProps,\r\n      headerProps,\r\n      cellProps\r\n    }\r\n  }, [sortable, columns])\r\n\r\n  //Table body内容渲染\r\n  const tableBodyRender = () => {\r\n    //根据是否分页区分渲染\r\n    let data = (paginationConfig && page) || rows\r\n\r\n    return data.map(row => {\r\n\r\n      prepareRow(row)\r\n      const rowProps = row.getRowProps();\r\n      return (\r\n        <div  key={row.id}>\r\n          <Table.Row {...row.getRowProps()}>\r\n            {row.cells.map((cell) => {\r\n              let collapsing = false\r\n              //设置checkbox列紧凑型  \r\n              if (cell.column.id === \"selection\") {\r\n                collapsing = true\r\n              }\r\n              return <Table.Cell {...cell.getCellProps(tableProps.cellProps)} collapsing={collapsing} key={cell.row.id + cell.column.id}>\r\n                {/* 分组 */}\r\n                {(groupBy && cell.isAggregated) ? (\r\n                  // If the cell is aggregated, use the Aggregated\r\n                  // renderer for cell\r\n                  cell.render('Aggregated')\r\n                ) : (groupBy && cell.isPlaceholder) ? null : ( // For cells with repeated values, render null\r\n                  // Otherwise, just render the regular cell\r\n                  cell.render('Cell')\r\n                )}\r\n\r\n              </Table.Cell>\r\n            })}\r\n          </Table.Row>\r\n\r\n          {/*\r\n            渲染行子组件\r\n            If the row is in an expanded state, render a row with a\r\n            column that fills the entire length of the table.\r\n          */}\r\n          {row.isExpanded && renderRowSubComponent?.({ row, rowProps, visibleColumns })}\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  //虚拟渲染行\r\n  const RenderRow = usePersistFn(\r\n    ({ index, style }) => {\r\n      const row = rows[index]\r\n      prepareRow(row)\r\n\r\n      const cellProps = (props, { cell }) => {\r\n        const align = cell.column.align\r\n\r\n        return {\r\n          style: {\r\n            ...cell.column.style,\r\n            flex: 1,\r\n            textAlign: align,//设置单元格值的位置\r\n          }\r\n        }\r\n      }\r\n      return (\r\n        <Table.Row\r\n          {...row.getRowProps({\r\n            style,\r\n          })}\r\n        >\r\n          {row.cells.map(cell => {\r\n            return (\r\n              <Table.Cell {...cell.getCellProps(cellProps)} key={cell.row.id + cell.column.id}>\r\n                {cell.render('Cell')}\r\n              </Table.Cell>\r\n            )\r\n          })}\r\n        </Table.Row>\r\n      )\r\n    },\r\n    [prepareRow, rows]\r\n  )\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    // 控制loading\r\n    <Dimmer.Dimmable dimmed={loading} >\r\n      <Dimmer active={loading} inverted>\r\n        <Loader>Loading</Loader>\r\n      </Dimmer>\r\n\r\n      {/* 工具区：列隐藏 ...(后续可加功能)*/}\r\n      {columsCanHidden &&\r\n        <Toolbar\r\n          allColumns={allColumns}\r\n          setHiddenColumns={setHiddenColumns}\r\n          className=\"margin-b-s\"\r\n        />}\r\n      <main className=\"container\" >\r\n        {/* 核心Table */}\r\n        <Table {...getTableProps()}\r\n          className=\"RTable\"\r\n          sortable={sortable}\r\n          selectable={selectable}\r\n          {...otherProps}\r\n        >\r\n          {/* 头部渲染 */}\r\n          <Table.Header {...tableProps.headerRoot()} >\r\n            {headerGroups.map((headerGroup, i) => (\r\n              <Table.Row {...headerGroup.getHeaderGroupProps(tableProps.headerGroupProps)} key={i}>\r\n                {headerGroup.headers.map(column => (\r\n                  <Table.HeaderCell {...column.getHeaderProps(tableProps.headerProps)}\r\n                    key={column.id}\r\n                    //列排序\r\n                    sorted={column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? 'descending'\r\n                        : 'ascending'\r\n                      : null}\r\n                  >\r\n                    {(groupBy && column.canGroupBy) ? (\r\n                      // If the column can be grouped, let's add a toggle\r\n                      <span {...column.getGroupByToggleProps()}>\r\n                        {column.isGrouped ? <Icon name=\"circle\" /> : <Icon name=\"circle outline\" />}\r\n                      </span>\r\n                    ) : null}\r\n                    {column.render('Header')}\r\n                    {/* Render the columns filter UI */}\r\n                    {filter && <div>{column.canFilter ? column.render('Filter') : null}</div>}\r\n                    {/* 列宽调整 */}\r\n                    {canResize && <div\r\n                      {...column.getResizerProps()}\r\n                      className={`resizer ${column.isResizing ? 'isResizing' : ''\r\n                        }`}\r\n                    />}\r\n                  </Table.HeaderCell>\r\n                ))}\r\n              </Table.Row>\r\n            ))}\r\n\r\n            {/* 整行全局过滤 */}\r\n            {filter && filterGlobal && (<Table.Row>\r\n              <Table.HeaderCell\r\n                colSpan={visibleColumns.length}\r\n                style={{\r\n                  textAlign: 'left',\r\n                }}>\r\n                <GlobalFilter\r\n                  preGlobalFilteredRows={preGlobalFilteredRows}\r\n                  globalFilter={state.globalFilter}\r\n                  setGlobalFilter={setGlobalFilter}\r\n                />\r\n              </Table.HeaderCell>\r\n            </Table.Row>)}\r\n          </Table.Header>\r\n          {/* 内容渲染 */}\r\n          <Table.Body {...getTableBodyProps()}>\r\n            {/* 虚拟化 */}\r\n            {virtualizedRows ? \r\n\r\n            <FixedSizeList\r\n              // 表格内容高默认400\r\n              height={virtualizedRows.allRowsHeight || 400}\r\n              itemCount={rows.length}\r\n              itemSize={35}\r\n            >\r\n              {RenderRow}\r\n            </FixedSizeList> \r\n            : \r\n            \r\n            <TableBodyRender\r\n            paginationConfig={paginationConfig}\r\n            page={page}\r\n            rows ={rows}\r\n            renderRowSubComponent ={renderRowSubComponent}\r\n            visibleColumns ={visibleColumns}\r\n            groupBy ={groupBy}\r\n            cellProps={tableProps.cellProps}\r\n            prepareRow={prepareRow}\r\n            />}\r\n          </Table.Body>\r\n\r\n          {/* 页脚渲染 */}\r\n          {(showFooter || paginationConfig) && (\r\n            <Table.Footer>\r\n              {/* 页脚 */}\r\n              {showFooter && <TableFooter footerGroups={footerGroups} customFooter={customFooter} />}\r\n              {/* 分页 */}\r\n              {paginationConfig && (\r\n                <TablePagination\r\n                  setPageSize={setPageSize}\r\n                  gotoPage={gotoPage}\r\n                  visibleColumnsLen={visibleColumns.length}\r\n                  isAllCheck={rowSelection}\r\n                  pageIndex={state.pageIndex}\r\n                  pageSize={state.pageSize}\r\n                  pageSizeSelectOption={paginationConfig?.pageSizeSelectOption}\r\n                  pageOptionsLen={pageOptions.length}\r\n                  canPreviousPage={canPreviousPage}\r\n                  canNextPage={canNextPage}\r\n                  nextPage={nextPage}\r\n                  pageCount={pageCount}\r\n                  previousPage={previousPage}\r\n                  getToggleAllRowsSelectedProps={getToggleAllRowsSelectedProps}\r\n\r\n                />)}\r\n            </Table.Footer>\r\n          )}\r\n        </Table>\r\n      </main>\r\n    </Dimmer.Dimmable>\r\n  )\r\n}\r\n\r\n\r\n\r\n//设置默认值\r\nRTable.defaultProps = {\r\n  columns: [],\r\n  data: [],\r\n  showFooter: false,\r\n  sortable: false,\r\n  selectable: false,\r\n  isExpanded: false,\r\n  canResize: false,\r\n  filter: false,\r\n  filterGlobal: true,\r\n  columsCanHidden: false,\r\n  virtualizedRows: false\r\n}\r\n\r\nexport default RTable\r\n\r\n","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\Toolbar\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Grouping.js",["256"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\n\r\n// 分组\r\nfunction Grouping() {\r\n    const columns = React.useMemo(\r\n      () => [\r\n        {\r\n          Header: 'Name',\r\n          columns: [\r\n            {\r\n              Header: 'First Name',\r\n              accessor: 'firstName',\r\n              // Use a two-stage aggregator here to first\r\n              // count the total rows being aggregated,\r\n              // then sum any of those counts if they are\r\n              // aggregated further\r\n              aggregate: 'count',\r\n              Aggregated: ({ value }) => `${value} Names`,\r\n            },\r\n            {\r\n              Header: 'Last Name',\r\n              accessor: 'lastName',\r\n              // Use another two-stage aggregator here to\r\n              // first count the UNIQUE values from the rows\r\n              // being aggregated, then sum those counts if\r\n              // they are aggregated further\r\n              aggregate: 'uniqueCount',\r\n              Aggregated: ({ value }) => `${value} Unique Names`,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          Header: 'Info',\r\n          columns: [\r\n            {\r\n              Header: 'Age',\r\n              accessor: 'age',\r\n              // Aggregate the average age of visitors\r\n              aggregate: 'average',\r\n              Aggregated: ({ value }) => `${value} (avg)`,\r\n            },\r\n            {\r\n              Header: 'Visits',\r\n              accessor: 'visits',\r\n              // Aggregate the sum of all visits\r\n              aggregate: 'sum',\r\n              Aggregated: ({ value }) => `${value} (total)`,\r\n            },\r\n            {\r\n              Header: 'Status',\r\n              accessor: 'status',\r\n            },\r\n            {\r\n              Header: 'Profile Progress',\r\n              accessor: 'progress',\r\n              // Use our custom roundedMedian aggregator\r\n              aggregate: roundedMedian,\r\n              Aggregated: ({ value }) => `${value} (med)`,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(100000), [])\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='grouping'>分组</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}\r\n                //默认根据firstName分组\r\n                groupBy={['age']}\r\n                isExpanded  //设置展开可见\r\n                virtualizedRows={{allRowsHeight:500}}  //虚拟行  \r\n                celled\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grouping\r\n\r\n\r\n// This is a custom aggregator that\r\n// takes in an array of leaf values and\r\n// returns the rounded median\r\nfunction roundedMedian(leafValues) {\r\n    let min = leafValues[0] || 0\r\n    let max = leafValues[0] || 0\r\n  \r\n    leafValues.forEach(value => {\r\n      min = Math.min(min, value)\r\n      max = Math.max(max, value)\r\n    })\r\n  \r\n    return Math.round((min + max) / 2)\r\n}","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\FilterTypeCom\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\RTable\\util.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Filtering.js",["257"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\nimport { SelectColumnFilter, SliderColumnFilter, NumberRangeColumnFilter } from '../component/FilterTypeCom'\r\n\r\n\r\n// 表头过滤\r\nfunction Filtering() {\r\n\r\n    // 表头配置过滤组件 没有配置使用默认Input\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                    },\r\n                    {\r\n                        Header: 'Last Name',\r\n                        accessor: 'lastName',\r\n                        // Use our custom `fuzzyText` filter on this column\r\n                        filter: 'fuzzyText',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Info',\r\n                columns: [\r\n                    {\r\n                        Header: 'Age',\r\n                        accessor: 'age',\r\n                        Filter: SliderColumnFilter,\r\n                        filter: 'equals',\r\n                    },\r\n                    {\r\n                        Header: 'Visits',\r\n                        accessor: 'visits',\r\n                        Filter: NumberRangeColumnFilter,\r\n                        filter: 'between',\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                        Filter: SelectColumnFilter,\r\n                        filter: 'includes',\r\n                    },\r\n                    {\r\n                        Header: 'Profile Progress',\r\n                        accessor: 'progress',\r\n                        Filter: SliderColumnFilter,\r\n                        filter: filterGreaterThan,\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(1000), [])\r\n\r\n    // 自定义过滤函数\r\n    // Define a custom filter filter function!\r\n    function filterGreaterThan(rows, id, filterValue) {\r\n        return rows.filter(row => {\r\n            const rowValue = row.values[id]\r\n            return rowValue >= filterValue\r\n        })\r\n    }\r\n\r\n    // This is an autoRemove method on the filter function that\r\n    // when given the new filter value and returns true, the filter\r\n    // will be automatically removed. Normally this is just an undefined\r\n    // check, but here, we want to remove the filter if it's not a number\r\n    filterGreaterThan.autoRemove = val => typeof val !== 'number'\r\n\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='filtering'>过滤</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}   // 分页\r\n                paginationConfig={{\r\n                    pageSize: 20,  //当前显示最大列值\r\n                    pageIndex: 5,  //当前激活页码\r\n                    pageSizeSelectOption: [   //当前显示可选最大列值  设置false即不显示 默认显示\r\n                        { key: '20', value: 20, text: '20条' },\r\n                        { key: '30', value: 30, text: '30条' },\r\n                        { key: '40', value: 40, text: '40条' },\r\n                        { key: '50', value: 50, text: '50条' },\r\n                        { key: '60', value: 60, text: '60条' },\r\n                    ]\r\n                }}\r\n                filter  //打开表头过滤功能\r\n                filterGlobal  //开启全局过滤 同时需要打开filter\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filtering","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\IndeterminationCheckbox\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\TablePagination\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Basic.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Footers.js",["258"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\n//表格页脚用法\r\n//注意colums要设置Footer\r\n//showFooter开启\r\n\r\nfunction Footers() {\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                Footer: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                        Footer: 'First Name',\r\n                    },\r\n                    {\r\n                        Header: 'Last Name',\r\n                        accessor: 'lastName',\r\n                        Footer: 'Last Name',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Info',\r\n                Footer: 'Info',\r\n                columns: [\r\n                    {\r\n                        Header: 'Age',\r\n                        accessor: 'age',\r\n                        Footer: 'Age',\r\n                    },\r\n                    {\r\n                        Header: 'Visits',\r\n                        accessor: 'visits',\r\n                        Footer: info => {\r\n                            // Only calculate total visits if rows change\r\n                            const total = React.useMemo(\r\n                                () =>\r\n                                    info.rows.reduce((sum, row) => row.values.visits + sum, 0),\r\n                                [info.rows]\r\n                            )\r\n\r\n                            return <>Total: {total}</>\r\n                        },\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                        Footer: 'Status',\r\n                    },\r\n                    {\r\n                        Header: 'Profile Progress',\r\n                        accessor: 'progress',\r\n                        Footer: 'Profile Progress',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n\r\n    const data = React.useMemo(() => makeData(20), [])\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='footers'>页脚</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}\r\n                showFooter\r\n                // customFooter={()=><div>123</div>}  自定义Footer组件\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footers","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Sorting.js",["259"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\n\r\n\r\n//排序\r\nfunction Sorting() {\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                    },\r\n                    {\r\n                        Header: 'Last Name',\r\n                        accessor: 'lastName',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Info',\r\n                columns: [\r\n                    {\r\n                        Header: 'Age',\r\n                        accessor: 'age',\r\n                    },\r\n                    {\r\n                        Header: 'Visits',\r\n                        accessor: 'visits',\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                    },\r\n                    {\r\n                        Header: 'Profile Progress',\r\n                        accessor: 'progress',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(20), [])\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='sorting'>排序</a></h3>\r\n            <RTable \r\n            columns={columns} \r\n            data={data}\r\n            sortable \r\n            \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sorting","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Pagination.js",["260"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\n//分页用法\r\nfunction Pagination() {\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                    },\r\n                    {\r\n                        Header: 'Last Name',\r\n                        accessor: 'lastName',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Info',\r\n                columns: [\r\n                    {\r\n                        Header: 'Age',\r\n                        accessor: 'age',\r\n                    },\r\n                    {\r\n                        Header: 'Visits',\r\n                        accessor: 'visits',\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                    },\r\n                    {\r\n                        Header: 'Profile Progress',\r\n                        accessor: 'progress',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(1000), [])\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='pagination'>分页</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}\r\n                // 分页\r\n                paginationConfig={{\r\n                    pageSize: 20,  //当前显示最大列值\r\n                    pageIndex: 5,  //当前激活页码\r\n                    pageSizeSelectOption: [   //当前显示可选最大列值  设置false即不显示 默认显示\r\n                        { key: '20', value: 20, text: '20条' },\r\n                        { key: '30', value: 30, text: '30条' },\r\n                        { key: '40', value: 40, text: '40条' },\r\n                        { key: '50', value: 50, text: '50条' },\r\n                        { key: '60', value: 60, text: '60条' },\r\n                    ]\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\RowSelection.js",["261"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\n\r\n//行可选\r\nfunction RowSelection() {\r\n\r\n    const selectedRowIds = React.useMemo(() => {\r\n        return {\r\n            \"0\": true,\r\n            \"0.0\": true,\r\n            \"0.1\": true\r\n        }\r\n    }, [])\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                    },\r\n                    {\r\n                        Header: 'Last Name',\r\n                        accessor: 'lastName',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Info',\r\n                columns: [\r\n                    {\r\n                        Header: 'Age',\r\n                        accessor: 'age',\r\n                    },\r\n                    {\r\n                        Header: 'Visits',\r\n                        accessor: 'visits',\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                    },\r\n                    {\r\n                        Header: 'Profile Progress',\r\n                        accessor: 'progress',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(10, 2), [])\r\n\r\n    // 行选中回调\r\n    const onRowSelection = React.useCallback((selectedRowIds, selectedRows) => {\r\n        console.log('获取当前选中的所有行id,所有行值', { selectedRowIds, selectedRows })\r\n    }, [])\r\n\r\n    //当前页全选按钮回调\r\n    const onAllPageRowsSelected = React.useCallback(value => {\r\n        console.log(\"当前页记录是否全选\", value)\r\n    }, [])\r\n\r\n    //当有分页时 所有记录全选按钮回调\r\n    const onAllRowsSelected = React.useCallback(value => {\r\n        console.log(\"所有记录是否全选\", value)\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='rowSelection'>行勾选</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}\r\n                isExpanded //子是否可展开\r\n\r\n                rowSelection={{\r\n                    selectedRowIds: selectedRowIds, //默认选中的行id\r\n                    onChange: onRowSelection,   //行选择\r\n                    onAllPageRowsSelected,  //当前页全选\r\n                    onAllRowsSelected   //所有行全选\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RowSelection","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\Expanding.js",["262"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\n\r\n//设置是否可展开子节点\r\nfunction Expanding() {\r\n\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                    },\r\n                    {\r\n                        Header: 'Last Name',\r\n                        accessor: 'lastName',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Info',\r\n                columns: [\r\n                    {\r\n                        Header: 'Age',\r\n                        accessor: 'age',\r\n                    },\r\n                    {\r\n                        Header: 'Visits',\r\n                        accessor: 'visits',\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                    },\r\n                    {\r\n                        Header: 'Profile Progress',\r\n                        accessor: 'progress',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(5, 5, 5), [])\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='expanding'>展开子</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}\r\n                isExpanded\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Expanding","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\LazySubComponent.js",["263"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\n//加载行子组件用法\r\nfunction LazySubComponent() {\r\n\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                    },\r\n                    {\r\n                        Header: 'Last Name',\r\n                        accessor: 'lastName',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Info',\r\n                columns: [\r\n                    {\r\n                        Header: 'Age',\r\n                        accessor: 'age',\r\n                    },\r\n                    {\r\n                        Header: 'Visits',\r\n                        accessor: 'visits',\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                    },\r\n                    {\r\n                        Header: 'Profile Progress',\r\n                        accessor: 'progress',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(20), [])\r\n\r\n\r\n    //渲染行子组件\r\n    // Create a function that will render our row sub components\r\n    const renderRowSubComponent = React.useCallback(\r\n        ({ row, rowProps, visibleColumns }) => (\r\n          <SubRowAsync\r\n            row={row}\r\n            rowProps={rowProps}\r\n            visibleColumns={visibleColumns}\r\n          />\r\n        ),\r\n        []\r\n      );\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='lazySubComponent'>懒加载子组件</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}\r\n                isExpanded\r\n                renderRowSubComponent={renderRowSubComponent}  //渲染行子组件 这个例子是异步加载子组件\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LazySubComponent\r\n\r\n\r\n\r\nfunction SubRowAsync({ row, rowProps, visibleColumns }) {\r\n    const [loading, setLoading] = React.useState(true);\r\n    const [data, setData] = React.useState([]);\r\n\r\n    React.useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setData(makeData(3));\r\n            setLoading(false);\r\n        }, 500);\r\n\r\n        return () => {\r\n            clearTimeout(timer);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <SubRows\r\n            row={row}\r\n            rowProps={rowProps}\r\n            visibleColumns={visibleColumns}\r\n            data={data}\r\n            loading={loading}\r\n        />\r\n    );\r\n}\r\n\r\n\r\n// This could be inlined into SubRowAsync, this this lets you reuse it across tables\r\nfunction SubRows({ row, rowProps, visibleColumns, data, loading }) {\r\n    if (loading) {\r\n        return (\r\n            <tr>\r\n                <td />\r\n                <td />\r\n                <td colSpan={visibleColumns.length - 1}>\r\n                    Loading...\r\n          </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {data.map((x, i) => {\r\n                return (\r\n                    <tr\r\n                        {...rowProps}\r\n                    // key={`${rowProps.key}-expanded-${i}`}\r\n                    >\r\n                        {row.cells.map((cell) => {\r\n                            return (\r\n                                <td\r\n                                    {...cell.getCellProps()}\r\n                                >\r\n                                    {cell.render(cell.column.SubCell ? 'SubCell' : 'Cell', {\r\n                                        value:\r\n                                            cell.column.accessor &&\r\n                                            cell.column.accessor(x, i),\r\n                                        row: { ...row, original: x }\r\n                                    })}\r\n                                </td>\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n}","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\EditableData.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\ColumnHiding.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\VirtualizedRows.js",["264"],"\r\nimport React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\n\r\n// 虚拟列\r\nfunction VirtualizedRows() {\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Row Index',\r\n                accessor: (row, i) => i,\r\n            },\r\n            {\r\n                Header: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                    },\r\n                    {\r\n                        Header: 'Last Name',\r\n                        accessor: 'lastName',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Info',\r\n                columns: [\r\n                    {\r\n                        Header: 'Age',\r\n                        accessor: 'age',\r\n                        width: 50,\r\n                    },\r\n                    {\r\n                        Header: 'Visits',\r\n                        accessor: 'visits',\r\n                        width: 60,\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                    },\r\n                    {\r\n                        Header: 'Profile Progress',\r\n                        accessor: 'progress',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(100000), [])\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='virtualizedRows'>虚拟行</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}\r\n                virtualizedRows\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VirtualizedRows","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\DataDriven.js",["265"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport namor from 'namor'\r\n\r\n\r\n\r\n//自定义格子样式\r\nfunction DataDriven() {\r\n\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                        className: 'user',   //设置一整列的类名\r\n                        style: {  //设置一整列的样式\r\n                            backgroundColor: 'green'\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Scores',\r\n                columns: [\r\n                    {\r\n                        Header: 'Day 1',\r\n                        accessor: 'score0',\r\n                    },\r\n                    {\r\n                        Header: 'Day 2',\r\n                        accessor: 'score1',\r\n                    },\r\n                    {\r\n                        Header: 'Day 3',\r\n                        accessor: 'score2',\r\n                    },\r\n                    {\r\n                        Header: 'Day 4',\r\n                        accessor: 'score3',\r\n                    },\r\n                    {\r\n                        Header: 'Day 5',\r\n                        accessor: 'score4',\r\n                    },\r\n                    {\r\n                        Header: 'Day 6',\r\n                        accessor: 'score5',\r\n                    },\r\n                    {\r\n                        Header: 'Day 7',\r\n                        accessor: 'score6',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(20), [])\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='dataDriven'>自定义 行事件、列事件、行样式、格子样式</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}\r\n                //表头点击事件\r\n                getHeaderProps={column => ({\r\n                    onClick: () => alert('Header!'),  //设置了自定义点击事件 则打开的排序点击事件会被覆盖\r\n                })}\r\n                //列点击事件\r\n                getColumnProps={column => ({\r\n                    onClick: () => { console.log(\"列点击事件Column\", column) },\r\n                })}\r\n                getRowProps={row => ({\r\n                    onClick: () => { console.log('行点击事件Row!', row) },\r\n                    style: {\r\n                        background: row.index % 2 === 0 ? 'rgba(0,0,0,.1)' : 'white',\r\n                    },\r\n                })}\r\n                getCellProps={cellInfo => ({\r\n                    style: {\r\n                        backgroundColor: `hsl(${120 * ((120 - cellInfo.value) / 120) * -1 +\r\n                            120}, 100%, 67%)`,\r\n                    },\r\n                })}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataDriven\r\n\r\n\r\n// 模拟数据用\r\nconst range = len => {\r\n    const arr = []\r\n    for (let i = 0; i < len; i++) {\r\n        arr.push(i)\r\n    }\r\n    return arr\r\n}\r\n\r\nconst newPerson = () => {\r\n    return {\r\n        firstName: namor.generate({ words: 1, numbers: 0 }),\r\n        score0: Math.floor(Math.random() * 100),\r\n        score1: Math.floor(Math.random() * 100),\r\n        score2: Math.floor(Math.random() * 100),\r\n        score3: Math.floor(Math.random() * 100),\r\n        score4: Math.floor(Math.random() * 100),\r\n        score5: Math.floor(Math.random() * 100),\r\n        score6: Math.floor(Math.random() * 100),\r\n    }\r\n}\r\n\r\nfunction makeData(...lens) {\r\n    const makeDataLevel = (depth = 0) => {\r\n        const len = lens[depth]\r\n        return range(len).map(d => {\r\n            return {\r\n                ...newPerson(),\r\n                subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\r\n            }\r\n        })\r\n    }\r\n\r\n    return makeDataLevel()\r\n}\r\n","D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\TableFooter\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\RTable\\customHook.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\component\\TableBody\\index.js",[],"D:\\jyproject\\2021\\Jan\\react-table\\demo\\src\\demo\\FullWidthColumnResizing.js",["266"],"import React from 'react'\r\nimport RTable from '../component/RTable'\r\nimport makeData from '../makeData'\r\n\r\n//自由列宽调整\r\nfunction FullWidthColumnResizing() {\r\n\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                columns: [\r\n                    {\r\n                        Header: 'First Name',\r\n                        accessor: 'firstName',\r\n                    },\r\n                    {\r\n                        Header: 'Last Name',\r\n                        accessor: 'lastName',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                Header: 'Info',\r\n                columns: [\r\n                    {\r\n                        Header: 'Age',\r\n                        accessor: 'age',\r\n                    },\r\n                    {\r\n                        Header: 'Visits',\r\n                        accessor: 'visits',\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                    },\r\n                    {\r\n                        Header: 'Profile Progress',\r\n                        accessor: 'progress',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const data = React.useMemo(() => makeData(20), [])\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <h3><a name='fullWidthColumnResizing'>列宽可调节</a></h3>\r\n            <RTable\r\n                columns={columns}\r\n                data={data}\r\n                defaultColumn={\r\n                    {\r\n                        // 下面设置默认的列宽 需要打开canResize属性才会生效 \r\n                        minWidth: 16,\r\n                        width: 25,\r\n                        maxWidth: 400,\r\n                    }\r\n                }\r\n                canResize  //列宽可调整  配置components里的属性设置列宽\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FullWidthColumnResizing",{"ruleId":"267","replacedBy":"268"},{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","severity":1,"message":"272","line":133,"column":9,"nodeType":"273","messageId":"274","endLine":133,"endColumn":26},{"ruleId":"271","severity":1,"message":"275","line":193,"column":7,"nodeType":"273","messageId":"274","endLine":193,"endColumn":19},{"ruleId":"276","severity":1,"message":"277","line":224,"column":6,"nodeType":"278","endLine":224,"endColumn":20,"suggestions":"279"},{"ruleId":"267","replacedBy":"280"},{"ruleId":"269","replacedBy":"281"},{"ruleId":"276","severity":1,"message":"282","line":10,"column":6,"nodeType":"273","endLine":10,"endColumn":10},{"ruleId":"276","severity":1,"message":"283","line":10,"column":6,"nodeType":"273","endLine":10,"endColumn":10,"suggestions":"284"},{"ruleId":"271","severity":1,"message":"285","line":182,"column":5,"nodeType":"273","messageId":"274","endLine":182,"endColumn":21},{"ruleId":"271","severity":1,"message":"286","line":429,"column":9,"nodeType":"273","messageId":"274","endLine":429,"endColumn":24},{"ruleId":"287","severity":1,"message":"288","line":71,"column":17,"nodeType":"289","endLine":71,"endColumn":36},{"ruleId":"287","severity":1,"message":"288","line":81,"column":17,"nodeType":"289","endLine":81,"endColumn":37},{"ruleId":"287","severity":1,"message":"288","line":71,"column":17,"nodeType":"289","endLine":71,"endColumn":35},{"ruleId":"287","severity":1,"message":"288","line":52,"column":17,"nodeType":"289","endLine":52,"endColumn":35},{"ruleId":"287","severity":1,"message":"288","line":50,"column":17,"nodeType":"289","endLine":50,"endColumn":38},{"ruleId":"287","severity":1,"message":"288","line":75,"column":17,"nodeType":"289","endLine":75,"endColumn":40},{"ruleId":"287","severity":1,"message":"288","line":53,"column":17,"nodeType":"289","endLine":53,"endColumn":37},{"ruleId":"287","severity":1,"message":"288","line":65,"column":17,"nodeType":"289","endLine":65,"endColumn":44},{"ruleId":"287","severity":1,"message":"288","line":58,"column":17,"nodeType":"289","endLine":58,"endColumn":43},{"ruleId":"287","severity":1,"message":"288","line":67,"column":17,"nodeType":"289","endLine":67,"endColumn":38},{"ruleId":"287","severity":1,"message":"288","line":53,"column":17,"nodeType":"289","endLine":53,"endColumn":51},"no-native-reassign",["290"],"no-negated-in-lhs",["291"],"no-unused-vars","'updateColumnOrder' is assigned a value but never used.","Identifier","unusedVar","'EditableCell' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'doForceUpdate'. Either include it or remove the dependency array.","ArrayExpression",["292"],["290"],["291"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'effect'. Either include it or remove the dependency array. If 'effect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["293"],"'selectedFlatRows' is assigned a value but never used.","'tableBodyRender' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},"Update the dependencies array to be: [doForceUpdate, initialValue]",{"range":"298","text":"299"},"Update the dependencies array to be: [effect]",{"range":"300","text":"301"},[5803,5817],"[doForceUpdate, initialValue]",[260,264],"[effect]"]